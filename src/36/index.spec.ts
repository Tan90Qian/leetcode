import {
  isValidSudoku,
  transformCharToNumber,
  validOnce,
  Character
} from "./index";

describe("test no.36", () => {
  it("test case 1", () => {
    const board = [
      ["5", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ];
    expect(isValidSudoku(board)).toBe(true);
  });

  it("test case 2", () => {
    const board = [
      ["8", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ];
    expect(isValidSudoku(board)).toBe(false);
  });

  it("test case 3", () => {
    const board = [
      [".", ".", ".", ".", ".", ".", ".", ".", "2"],
      [".", ".", ".", ".", ".", ".", "6", ".", "."],
      [".", ".", "1", "4", ".", ".", "8", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", "3", ".", ".", ".", "."],
      ["5", ".", "8", "6", ".", ".", ".", ".", "."],
      [".", "9", ".", ".", ".", ".", "4", ".", "."],
      [".", ".", ".", ".", "5", ".", ".", ".", "."]
    ];
    expect(isValidSudoku(board)).toBe(true);
  });
});

describe("test transformCharToNumber fnc", () => {
  it("test case 1", () => {
    expect(transformCharToNumber("8")).toBe(8);
  });

  it("test case 2", () => {
    expect(transformCharToNumber(".")).toBe(-1);
  });
});

describe("test validOnce fnc", () => {
  let line: Character[];
  beforeEach(() => {
    line = ["", "", "", "", "", "", "", "", ""];
  });

  it("test case 1", () => {
    expect(
      validOnce(line, () => {
        return -1;
      })
    ).toBe(true);
  });

  it("test case 2", () => {
    expect(
      validOnce(line, (_, idx: number) => {
        return idx;
      })
    ).toBe(true);
  });

  it("test case 3", () => {
    expect(
      validOnce(line, () => {
        return 1;
      })
    ).toBe(false);
  });
});
